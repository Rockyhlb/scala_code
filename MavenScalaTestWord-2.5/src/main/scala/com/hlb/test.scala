package com.hlb

/**
 * 2.5 主要介绍面向对象编程基础中的 “模式匹配”
 * Created by IntelliJ IDEA.
 * User: 麦田里的乌鸦
 * Date: 2023 / 9 / 15
 * Time: 10:53
 **/

object test {

  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

//  def main(args: Array[String]): Unit = {
//    // 2.5.1 --> 简单匹配     &nbsp&nbsp
//    // Scala的模式匹配最常用于match语句中，下面是简单的整型值的匹配实例
////    val colorNum = 3
////    val colorStr = colorNum match {
////      case 1 => "red"
////      case 2 => "blue"
////      case 3 => "pink"
////      case _ => "Not Allowed"
////    }
////    println(colorStr)
//
//    // 在模式匹配的case语句中,还可以使用变量
//    printf("请输入您的幸运数：")
//    val colorNum = readInt();
//    val colorStr = colorNum match {
//      case 1 => "red"
//      case 2 => "blue"
//      case 3 => "pink"
//      case unexpected => unexpected + " Not Allowed"
//    }
//    println("您的幸运色是：" + colorStr)
//  }
//}

//                          _ooOoo_                          //\n\
//                         o8888888o                         //\n\
//                         88\" . \"88                         //\n\
//                         (| ^_^ |)                         //\n\
//                         O\\  =  /O                         //\n\
//                      ____/`---'\\____                      //\n\
//                    .'  \\\\|     |//  `.                    //\n\
//                   /  \\\\|||  :  |||//  \\                   //\n\
//                  /  _||||| -:- |||||-  \\                  //\n\
//                  |   | \\\\\\  -  /// |   |                  //\n\
//                  | \\_|  ''\\---/''  |   |                  //\n\
//                  \\  .-\\__  `-`  ___/-. /                  //\n\
//                ___`. .'  /--.--\\  `. . ___                //\n\
//               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
//            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
//            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
//                          `=---='                          //\n\
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
//           佛祖保佑       永不宕机     永无BUG             //\n\

//  def main(args: Array[String]): Unit = {
//    // 2.5.2 --> 类型模式       &nbsp&nbsp
//    // Scala 可以对表达式的类型进行匹配
//    for (elem <- List(1,2.5,"Java","Scala")) {
//      val str = elem match {
//        case i: Int => i + " is an int value"
//        case d: Double => d + " is a double value"
//        case "Scala" => "Scala is found~"
//        case s:String => s + " is found~"
//        case _ => "This is an unexpected value"
//      }
//      println(str)
//    }
//  }
//}

//                          _ooOoo_                          //\n\
//                         o8888888o                         //\n\
//                         88\" . \"88                         //\n\
//                         (| ^_^ |)                         //\n\
//                         O\\  =  /O                         //\n\
//                      ____/`---'\\____                      //\n\
//                    .'  \\\\|     |//  `.                    //\n\
//                   /  \\\\|||  :  |||//  \\                   //\n\
//                  /  _||||| -:- |||||-  \\                  //\n\
//                  |   | \\\\\\  -  /// |   |                  //\n\
//                  | \\_|  ''\\---/''  |   |                  //\n\
//                  \\  .-\\__  `-`  ___/-. /                  //\n\
//                ___`. .'  /--.--\\  `. . ___                //\n\
//               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
//            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
//            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
//                          `=---='                          //\n\
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
//           佛祖保佑       永不宕机     永无BUG             //\n\

//  def main(args: Array[String]): Unit = {
//    // 2.5.3 --> “守卫(guard)” 语句     &nbsp&nbsp
//    // 可以在模式匹配中添加一些必要的处理逻辑
//    for (elem <- List(1,2,3,4)) {
//      elem match {
//        case _ if (elem % 2 == 0) => println(elem + " is even~")  // 偶数
//        case _  => println(elem + " is odd~")  // 奇数
//      }
//    }
//  }
//}

//                          _ooOoo_                          //\n\
//                         o8888888o                         //\n\
//                         88\" . \"88                         //\n\
//                         (| ^_^ |)                         //\n\
//                         O\\  =  /O                         //\n\
//                      ____/`---'\\____                      //\n\
//                    .'  \\\\|     |//  `.                    //\n\
//                   /  \\\\|||  :  |||//  \\                   //\n\
//                  /  _||||| -:- |||||-  \\                  //\n\
//                  |   | \\\\\\  -  /// |   |                  //\n\
//                  | \\_|  ''\\---/''  |   |                  //\n\
//                  \\  .-\\__  `-`  ___/-. /                  //\n\
//                ___`. .'  /--.--\\  `. . ___                //\n\
//               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
//            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
//            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
//                          `=---='                          //\n\
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
//           佛祖保佑       永不宕机     永无BUG             //\n\

//  def main(args: Array[String]): Unit = {
//    // 2.5.4 --> for表达式中的匹配    &nbsp&nbsp
//    // 创建映射
//    val simple = Map("edu" -> "Education","org" -> "Organization",
//      "gov" -> "government")
//    // 循环遍历映射的基本格式
//    for ((k,v) <- simple) {printf("key is %s, value is %s\n",k,v)}
//  }
//}

//                          _ooOoo_                          //\n\
//                         o8888888o                         //\n\
//                         88\" . \"88                         //\n\
//                         (| ^_^ |)                         //\n\
//                         O\\  =  /O                         //\n\
//                      ____/`---'\\____                      //\n\
//                    .'  \\\\|     |//  `.                    //\n\
//                   /  \\\\|||  :  |||//  \\                   //\n\
//                  /  _||||| -:- |||||-  \\                  //\n\
//                  |   | \\\\\\  -  /// |   |                  //\n\
//                  | \\_|  ''\\---/''  |   |                  //\n\
//                  \\  .-\\__  `-`  ___/-. /                  //\n\
//                ___`. .'  /--.--\\  `. . ___                //\n\
//               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
//            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
//            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
//                          `=---='                          //\n\
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
//           佛祖保佑       永不宕机     永无BUG             //\n\

//  def main(args: Array[String]): Unit = {
//    // 2.5.5 --> case类的匹配  &nbsp&nbsp
//    // case类是一种特殊的类，它们经过优化以被用于模式匹配。
//    case class Simple(key: String,value: String)
//    val simple1 = Simple("edu", "education")
//    val simple2 = Simple("org","organization")
//    val simple3 = Simple("gov","government")
//
//    for (simple <- List(simple1,simple2,simple3)) {
//      simple match {
//        case Simple("edu","education") => println("hello simple1")
//        case Simple("org","organization") => println("hello simple2")
//        case Simple(key,value) => printf("Simple: %s, do you want in %s?",key,value)
//      }
//    }
//  }
//}

//                          _ooOoo_                          //\n\
//                         o8888888o                         //\n\
//                         88\" . \"88                         //\n\
//                         (| ^_^ |)                         //\n\
//                         O\\  =  /O                         //\n\
//                      ____/`---'\\____                      //\n\
//                    .'  \\\\|     |//  `.                    //\n\
//                   /  \\\\|||  :  |||//  \\                   //\n\
//                  /  _||||| -:- |||||-  \\                  //\n\
//                  |   | \\\\\\  -  /// |   |                  //\n\
//                  | \\_|  ''\\---/''  |   |                  //\n\
//                  \\  .-\\__  `-`  ___/-. /                  //\n\
//                ___`. .'  /--.--\\  `. . ___                //\n\
//               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
//            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
//            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
//                          `=---='                          //\n\
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
//           佛祖保佑       永不宕机     永无BUG             //\n\

  def main(args: Array[String]): Unit = {
      // 2.5.6 --> Option类型
  /*
      ● 标准类库中的Option类型用case类来表示那种可能存在也可能不存在的值。
      一般而言，对于每种语言来说，都会有一个关键字来表示一个对象引用的是“无”，
      在Java中使用的是null。Scala融合了函数式编程风格，因此，当预计到变量
      或者函数返回值可能不会引用任何值的时候，建议使用Option类型。
      ● Option类包含一个子类Some，当存在可以被引用的值的时候，就可
      以使用Some来包含这个值，例如Some("Hadoop")。而None则被声明
      为一个对象，而不是一个类，表示没有值。
  */
    // 创建一个映射
    val projects = Map("Hadoop" -> 1,"Spark"->2,"HBase" -> 3)
    // 映射中取出key为"hadoop"对应的值,键是存在的,可以取到值,并且取到的值会被包含在some当中
    println(projects.get("Hadoop"))
    // "hive"是不存在的，返回None对象
    println(projects.get("Flume"))

    // Option类型还提供了getOrElse方法，这个方法在这个Option是Some的实例时
    // 返回对应的值，而在是None的实例时返回传入的参数。例如:
    println("---------------------------------")
    val res = projects.get("Flume")
    println(res)
    println(projects.getOrElse("Flume","No projects"))
/*
    在Scala中，使用Option的情形是非常频繁的。在Scala里，经常会用到
    Option[T]类型，其中的T可以是Sting或Int或其他各种数据类型。
    Option[T]实际上就是一个容器，我们可以把它看做是一个集合，只不过这个集
    合中要么只包含一个元素(被包装在Some中返回)，要么就不存在元素(返回None)。
    既然是一个集合，我们当然可以对它使用map、foreach或者filter等方法。比如:
*/
    // foreach遍历遇到None时，什么都不做
    println("-------------------------------")
    projects.get("Hadoop").foreach(println)
  }
}
