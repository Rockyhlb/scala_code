package com.hlb

/**
 * 3.2 主要介绍函数式编程基础中 “针对集合的操作”
 * Created by IntelliJ IDEA.
 * User: 麦田里的乌鸦
 * Date: 2023 / 9 / 16
 * Time: 14:00
 **/

object test {
  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

//    def main(args: Array[String]): Unit = {
//      // 3.1.1 遍历操作    &nbsp&nbsp
//      // 列表的遍历
//      // for 循环遍历
//      val list = List(1,2,3,4,5)
//      println("for循环遍历：")
//      for (elem <- list) {
//        print(elem)
//      }
//
//      // foreach 循环遍历
//      println("\nforeach循环遍历：")
//      list.foreach(print)
//      println
//      list.foreach(elem => print(elem))
//      println
//      list foreach print
//
//      // 映射(Map)的遍历：for ((k,v) <- 映射名) 语句块
//      val map = Map("edu" -> "education","org" -> "organization")
//      // 循环遍历映射
//      println
//      for ((k,v) <- map) {printf("key is: %s,value is: %s\n",k,v)}
//      // foreach 实现对映射的遍历
//      printf("------------------------------------\n")
//      map foreach {case (k,v) => println(k + " is " +v)}
//      printf("-----------------------------------\n")
//      map foreach {kv => println(kv._1 + " is " + kv._2)}
//      printf("------------------------------------\n")
//      map.foreach(kv => println(kv._1 + " is " + kv._2 ))
//    }
//  }

  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

//    def main (args: Array[String] ): Unit = {
//      // 3.1.2 map操作 和 flatMap操作  &nbsp&nbsp
//      // map操作是针对集合的典型变换操作，它将某个函数应用到集合中的每
//      // 个元素，并产生一个结果集合。  (一对一的转换)
//      val projects = List("hadoop","hbase","spark")
//      projects.map(s => s.toUpperCase).foreach(println)
//  /*
//      flatMap：是map的一种扩展。在flatMap中，我们会传入一个函数，该函数
//      对每个输入都会返回一个集合(而不是一个元素)，然后，flatMap把生
//      成的多个集合“拍扁”成为一个集合。(打散再重组)
//  */
//      val projects1 = List("hadoop","hbase","spark")
//      // 先flatmap 再通过“<-”遍历
//      for (elem <- projects1 flatMap (s => s.toList)) {
//          print(elem)
//      }
//      // 上面的flatMap执行时， 会把books中的每个元素都调用toList,生成
//      // List[Char]，最终，多个Char的集合被“拍扁”成一个集合。
//    }
//  }

  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

//    def main(args: Array[String]): Unit = {
//      // 3.1.3 filter 操作   &nbsp&nbsp
//      // 遍历一个集合并从中获取满足指定条件的元素组成一个新的集合。
//      val map = Map("edu" -> "education","org" -> "organization")
//      println(map)
//      // 采用filter操作过滤得到那些组织名称中包含"educ"的元素
//      // 下面打印出 Map(edu -> education)
//      val mapOfEduc = map filter (kv => kv._2 contains("educ"))
//      println(mapOfEduc)
//      val mapOfOR = map filter (kv => kv._2 contains("or"))
//      println(mapOfOR)
//    }
//  }
  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

//    def main (args: Array[String] ): Unit = {
//      // 3.1.4 reduce 操作    &nbsp&nbsp
//  /*
//      可以使用reduce这种二元操作对集合中的元素进行归约
//      reduce包含reduceLeft和reduceRight两种操作，前者从集合的头部开始操作，后
//      者从集合的尾部开始操作。
//  */
//      val list = List(1,2,3,4,5)
//      // 操作顺序为：1+2=3，3+3=6，6+4=10，10+5=15
//      println(list.reduceLeft(_ + _))
//      // 操作顺序为：4+5=9，9+3=12，12+2=14，14+1=15
//      println(list.reduceRight(_ + _))
//      // 直接使用reduce,默认使用的是reduceLeft
//    }
//  }

  //                          _ooOoo_                          //\n\
  //                         o8888888o                         //\n\
  //                         88\" . \"88                         //\n\
  //                         (| ^_^ |)                         //\n\
  //                         O\\  =  /O                         //\n\
  //                      ____/`---'\\____                      //\n\
  //                    .'  \\\\|     |//  `.                    //\n\
  //                   /  \\\\|||  :  |||//  \\                   //\n\
  //                  /  _||||| -:- |||||-  \\                  //\n\
  //                  |   | \\\\\\  -  /// |   |                  //\n\
  //                  | \\_|  ''\\---/''  |   |                  //\n\
  //                  \\  .-\\__  `-`  ___/-. /                  //\n\
  //                ___`. .'  /--.--\\  `. . ___                //\n\
  //               ."" '<  `.___\\_<|>_/___.'  >'"".                //\n\
  //            | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |            //\n\
  //            \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /            //\n\
  //     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
  //                          `=---='                          //\n\
  //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
  //           佛祖保佑       永不宕机     永无BUG             //\n\

  def main(args: Array[String]): Unit = {
    // 3.1.5 fold 操作     &nbsp&nbsp
    // 折叠(fold)操作和reduce(归约)操作比较类似。fold操作需要从一个初始的
    // “种子”值开始,并以该值作为上下文,处理集合中的每个元素。
    val list = List(1,2,3,4,5)
    // 操作顺序为：1*10=10，10*2=20，20*3=60，60*4=240,240*5=1200
    println(list.fold(10)(_ * _))
/*
    fold有两个变体: foldLeft()和foldRight(),其中,foldLeft(),第一个参数为
    累计值,集合遍历的方向是从左到右。foldRight(),第二个参数为累计值，
    集合遍历的方向是从右到左。对于fold()自身而言,遍历的顺序是未定义的，
    不过,一般都是从左到右遍历。
*/
  }
}

